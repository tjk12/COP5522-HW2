Development Log: HW2 OpenMP Parallelization
Name: Trever Knie

October 3, 2025: Project Kickoff and Initial Implementation
Began the assignment by creating OpenMP-parallelized versions of the dense (hw2-a) and triangular (hw2-b) matrix-vector multiplication algorithms in C++, evolving the code from HW1.

Developed a cross-platform Makefile to handle compilation on both macOS (using a Homebrew-installed GCC) and standard Linux systems. The makefile was designed to automatically detect the operating system and the latest available GCC compiler.

Established a core automation workflow with a run_benchmarks.sh script to execute tests and a create_report.py script to parse the results and generate a preliminary PDF.

Worked through several iterations to debug the Makefile for macOS, addressing issues with clang's lack of OpenMP support, locating the correct Homebrew GCC compiler, and fixing make-specific syntax errors (tabs vs. spaces).

October 4, 2025: Performance Tuning and Data Integrity
Corrected a major performance bottleneck in the dense matrix multiplication (hw2-a.cpp). The initial cache-unfriendly k-i loop order was replaced with a sequential i-k order, resulting in a significant increase in measured Gflop/s.

Identified and fixed a critical data pipeline bug where fast-running computations led to division-by-zero errors when calculating Gflop/s. Added safety checks to the C++ code to handle these cases, preventing corrupted data in the results.json file.

October 5, 2025: Advanced Benchmarking and Reporting
Enhanced the run_benchmarks.sh script to automate the testing of multiple compiler optimization profiles (-O2, -O3, -O3 -funroll-loops), as well as the different OpenMP scheduling strategies for hw2-b.

Rewrote the create_report.py script to handle the more complex nested JSON output. Implemented logic to generate a comparison table that highlights the best-performing compiler flag for each matrix size.

October 6, 2025: Data Visualization and Analysis
Improved the scaling graphs by plotting the performance of both hw2-a and hw2-b together for direct comparison. Added a dashed "Ideal Linear Scaling" line to provide a clear theoretical baseline for evaluating the real-world results.

Added sections to the PDF report that provide textual analysis and insights into the strong and weak scaling graphs, explaining concepts like Amdahl's Law and parallel overhead.

Corrected the analysis text to accurately describe ideal weak scaling as linear Gflop/s growth, not flat.

October 7, 2025: Finalization and Submission Packaging
Refactored hw2-b.cpp to accept one or two command-line arguments, ensuring it could be run identically to the HW1 executable for compatibility with grading scripts, while retaining its advanced testing features.

Integrated a function into the create_report.py script to automatically create a hw2.tar archive containing all required source files, the Makefile, the final PDF report, and this log, streamlining the submission process.

Performed a final, complete run of the ./run_benchmarks.sh script on the target system (Bridges-2) to generate the final results and package the submission archive.